-- Copyright 2020-2023 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
-- 
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
-- 
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local IDENTITY = vmath.matrix4()

local BLACK = vmath.vector4(0)

local AMBIENT_LIGHT = vmath.vector4(0.1, 0.1, 0.1, 1.0)

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

local function create_render_target(name)
    local color_params = { 
        format = render.FORMAT_RGBA,
        width = render.get_window_width(),
        height = render.get_window_height(),
        min_filter = render.FILTER_LINEAR,
        mag_filter = render.FILTER_LINEAR,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE
    }

    local depth_params = {
        format = render.FORMAT_DEPTH,
        width = render.get_window_width(),
        height = render.get_window_height(),
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE
    }

    return render.render_target(name, { [render.BUFFER_COLOR_BIT] = color_params })    
end

local function render_to_render_target(render_target, draw_function)
    render.set_render_target(render_target)
    draw_function()
    render.set_render_target(render.RENDER_TARGET_DEFAULT)
end

local function clear_with_color(color)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
end

local function set_default_render_state()
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.light_pred = render.predicate({"light"})
    self.quad_pred = render.predicate({"quad"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.ambient_color = vmath.vector4(0.15, 0.15, 0.15, 1.0)

    self.view = IDENTITY

    -- default is stretch projection. copy from builtins and change for different projection
    -- or send a message to the render script to change projection:
    -- msg.post("@render:", "use_stretch_projection", { near = -1, far = 1 })
    -- msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
    -- msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
    self.near = -1
    self.far = 1
    self.projection_fn = stretch_projection

    self.normal_rt = create_render_target("normal")
    self.light_rt = create_render_target("light")
end

function update(self)
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    if window_width == 0 or window_height == 0 then
        return
    end

    clear_with_color(self.clear_color)

    local proj = get_projection(self)
    local frustum = proj * self.view
    render.set_viewport(0, 0, window_width, window_height)

    render_to_render_target(self.normal_rt, function() 
        -- clear screen buffers
        --
        clear_with_color(self.clear_color)

        -- render world (sprites, tilemaps, particles etc)
        --
        render.set_view(self.view)
        render.set_projection(proj)

        set_default_render_state()

        render.draw(self.tile_pred, {frustum = frustum})
        render.draw(self.particle_pred, {frustum = frustum})
        render.draw_debug3d()
    end)

    render_to_render_target(self.light_rt, function() 
        -- clear screen buffers
        --
        clear_with_color(self.ambient_color)

        -- render world (sprites, tilemaps, particles etc)
        --
        render.set_view(self.view)
        render.set_projection(proj)

        set_default_render_state()

        render.draw(self.light_pred, {frustum = frustum})
        render.draw(self.particle_pred, {frustum = frustum})
        render.draw_debug3d()
    end)

    render.set_view(IDENTITY)
    render.set_projection(IDENTITY)

    set_default_render_state()

    render.enable_material(hash("lighting_quad"))
    render.enable_texture(0, self.normal_rt, render.BUFFER_COLOR0_BIT)
    render.enable_texture(1, self.light_rt, render.BUFFER_COLOR0_BIT)
    render.draw(self.quad_pred)

    render.disable_texture(0)
    render.disable_texture(1)

    render.disable_material()

    -- render GUI
    --
    local view_gui = vmath.matrix4()
    local proj_gui = vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1)
    local frustum_gui = proj_gui * view_gui

    render.set_view(view_gui)
    render.set_projection(proj_gui)

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred, {frustum = frustum_gui})
    render.draw(self.text_pred, {frustum = frustum_gui})
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("set_ambient_color") then
        self.ambient_color = message.color
    end
end
